const { mainMenuKeyboard, addTaskKeyboard } = require('../keyboards/keyboards');
const { getTodayFormatted } = require('../utils/utils');
const { userTasks, bot } = require('../data');

function showMainMenu(chatId) {
  bot.sendMessage(chatId, "–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:", {
    reply_markup: mainMenuKeyboard.reply_markup,
  });
}

function sendFeedbackMessage(chatId) {
  bot.sendMessage(
    chatId,
    "üëâ –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É /feedback, —â–æ–± –Ω–∞–ø–∏—Å–∞—Ç–∏ –≤—ñ–¥–≥—É–∫."
  );
}
  
function sendCommandsList(chatId) {
  const responseMessage = `–û—Å—å –¥–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏: ‚úîÔ∏è 
  - '–î–æ–¥–∞—Ç–∏ üìù' - –î–æ–¥–∞—Ç–∏ –Ω–æ–≤–µ –∑–∞–≤–¥–∞–Ω–Ω—è.
  - '–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ üìã' - –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Å–ø–∏—Å–æ–∫ –∑–∞–≤–¥–∞–Ω—å.
  - '–ó–∞–ø–ª–∞–Ω—É–≤–∞—Ç–∏ ‚åõ' - –ó–∞–ø–ª–∞–Ω—É–≤–∞—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è.
  - '–í–∏–π—Ç–∏' - –í–∏—Ö—ñ–¥ –∑ –±–æ—Ç–∞.`;

  bot.sendMessage(chatId, responseMessage);
}
  
function handleAddTask(chatId) {
  bot.sendMessage(
    chatId,
    "–í–≤–µ–¥–∏ –∑–∞–≤–¥–∞–Ω–Ω—è, —è–∫–µ —Ö–æ—á–µ—à –¥–æ–¥–∞—Ç–∏. –ù–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É '–ó–∞–≤–µ—Ä—à–∏—Ç–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω—å', —â–æ–± –∑—É–ø–∏–Ω–∏—Ç–∏."
  );

  bot.sendMessage(chatId, "–¢–µ–ø–µ—Ä –≤–≤–æ–¥—å –∑–∞–≤–¥–∞–Ω–Ω—è:", {
    reply_markup: addTaskKeyboard.reply_markup,
  });

  bot.once('message', function handleTask(response) {
    if (response.text === '–ó–∞–≤–µ—Ä—à–∏—Ç–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω—å') {
      bot.sendMessage(chatId, "‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ –ø—Ä–æ—Ü–µ—Å –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω—å.");
      showMainMenu(chatId);
      return;
    }

    if (response.text) {
      userTasks[chatId] = userTasks[chatId] || [];
      userTasks[chatId].push({ task: response.text, done: false });
      bot.sendMessage(chatId, `‚úÖ –ó–∞–≤–¥–∞–Ω–Ω—è "${response.text}" –¥–æ–¥–∞–Ω–æ –¥–æ —Å–ø–∏—Å–∫—É.`);
      bot.once('message', handleTask);
    } else {
      bot.sendMessage(chatId, "‚ùå –ó–∞–≤–¥–∞–Ω–Ω—è –Ω–µ –±—É–ª–æ –≤–≤–µ–¥–µ–Ω–æ.");
    }
  });
}
  
function handleViewTasks(chatId) {
  if (!userTasks[chatId] || userTasks[chatId].length === 0) {
    bot.sendMessage(chatId, "‚ùó –£ —Ç–µ–±–µ –Ω–µ–º–∞—î –∑–∞–≤–¥–∞–Ω—å.");
    return;
  }
  
  const today = getTodayFormatted();
  const taskListMessage = userTasks[chatId]
    .map(
      (task, index) => `${index + 1}. ${task.done ? '‚úÖ' : '‚ùå'} ${task.task}`
    )
    .join('\n');

  bot.sendMessage(
    chatId,
    `${today}\n*–û—Å—å —Ç–≤—ñ–π —Å–ø–∏—Å–æ–∫ –∑–∞–≤–¥–∞–Ω—å:*\n${taskListMessage}\n\n–í–≤–µ–¥–∏:\n- 'done <–Ω–æ–º–µ—Ä>', —â–æ–± –ø–æ–∑–Ω–∞—á–∏—Ç–∏ –≤–∏–∫–æ–Ω–∞–Ω–µ.\n- 'delete <–Ω–æ–º–µ—Ä>', —â–æ–± –≤–∏–¥–∞–ª–∏—Ç–∏.`,
    { parse_mode: 'Markdown' }
  );
}
  
function handleDeleteTask(chatId, msgText) {
  const taskNumber = parseInt(msgText.split(' ')[1]) - 1;
  if (userTasks[chatId] && userTasks[chatId][taskNumber]) {
    const removedTask = userTasks[chatId].splice(taskNumber, 1);
    bot.sendMessage(chatId, `üóëÔ∏è –ó–∞–≤–¥–∞–Ω–Ω—è "${removedTask[0].task}" –≤–∏–¥–∞–ª–µ–Ω–æ.`);
  } else {
    bot.sendMessage(chatId, "‚ùå –ü–æ–º–∏–ª–∫–∞: –∑–∞–≤–¥–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.");
  }
}
  
function handleMarkDone(chatId, msgText) {
  const taskNumber = parseInt(msgText.split(' ')[1]) - 1;
  if (userTasks[chatId] && userTasks[chatId][taskNumber]) {
    userTasks[chatId][taskNumber].done = true;
    bot.sendMessage(chatId, `‚úÖ –ó–∞–≤–¥–∞–Ω–Ω—è "${userTasks[chatId][taskNumber].task}" –ø–æ–∑–Ω–∞—á–µ–Ω–æ —è–∫ –≤–∏–∫–æ–Ω–∞–Ω–µ.`);
  } else {
    bot.sendMessage(chatId, "‚ùå –ü–æ–º–∏–ª–∫–∞: –∑–∞–≤–¥–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.");
  }
}

module.exports = {
  sendFeedbackMessage,
  sendCommandsList,
  handleAddTask,
  handleViewTasks,
  handleDeleteTask,
  handleMarkDone
}