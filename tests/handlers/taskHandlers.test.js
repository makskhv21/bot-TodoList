jest.mock('../../data', () => ({
  bot: {
    sendMessage: jest.fn(),
    once: jest.fn(),
  },
  userTasks: {},
}));
jest.mock('../../keyboards/keyboards', () => ({
  mainMenuKeyboard: { reply_markup: { keyboard: [['Button 1']] } },
  addTaskKeyboard: { reply_markup: { keyboard: [['Finish']] } },
}));
jest.mock('../../utils/utils', () => ({
  getTodayFormatted: jest.fn(() => '2024-12-09'),
}));

const {
  sendFeedbackMessage,
  sendCommandsList,
  handleAddTask,
  handleViewTasks,
  handleDeleteTask,
  handleMarkDone,
} = require('../../handlers/taskHandlers');
const { bot, userTasks } = require('../../data');

beforeEach(() => {
  jest.clearAllMocks();
  Object.keys(userTasks).forEach((key) => delete userTasks[key]);
});

const sendMessageSpy = (userId, message) => {
  expect(bot.sendMessage).toHaveBeenCalledWith(userId, message);
};

describe('sendFeedbackMessage', () => {
  it('should send feedback instructions to the user', () => {
    sendFeedbackMessage(123);
    sendMessageSpy(123, 'üëâ –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É /feedback, —â–æ–± –Ω–∞–ø–∏—Å–∞—Ç–∏ –≤—ñ–¥–≥—É–∫.');
  });
});

describe('sendCommandsList', () => {
  it('should send the list of commands', () => {
    sendCommandsList(123);
    sendMessageSpy(123, expect.stringContaining('–û—Å—å –¥–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:'));
  });
});

describe('handleAddTask', () => {
  it('should add tasks to the userTasks array', () => {
    bot.once.mockImplementationOnce((event, handler) => {
      if (event === 'message') handler({ text: 'Test Task', chatId: 123 });
    });
    handleAddTask(123);
    sendMessageSpy(123, "–í–≤–µ–¥–∏ –∑–∞–≤–¥–∞–Ω–Ω—è, —è–∫–µ —Ö–æ—á–µ—à –¥–æ–¥–∞—Ç–∏. –ù–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É '–ó–∞–≤–µ—Ä—à–∏—Ç–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω—å', —â–æ–± –∑—É–ø–∏–Ω–∏—Ç–∏.");
    expect(userTasks[123]).toEqual([{ task: 'Test Task', done: false }]);
  });

  it('should stop adding tasks on exit command', () => {
    bot.once.mockImplementationOnce((event, handler) => {
      if (event === 'message') handler({ text: '–ó–∞–≤–µ—Ä—à–∏—Ç–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω—å', chatId: 123 });
    });
    handleAddTask(123);
    sendMessageSpy(123, '‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ –ø—Ä–æ—Ü–µ—Å –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω—å.');
  });
});

describe('handleViewTasks', () => {
  it('should notify if the user has no tasks', () => {
    userTasks[123] = [];
    handleViewTasks(123);
    sendMessageSpy(123, '‚ùó –£ —Ç–µ–±–µ –Ω–µ–º–∞—î –∑–∞–≤–¥–∞–Ω—å.');
  });
});

describe('handleMarkDone', () => {
  it('should mark a task as done', () => {
    userTasks[123] = [{ task: 'Test Task', done: false }];
    handleMarkDone(123, 'done 1');
    expect(userTasks[123][0].done).toBe(true);
    sendMessageSpy(123, '‚úÖ –ó–∞–≤–¥–∞–Ω–Ω—è "Test Task" –ø–æ–∑–Ω–∞—á–µ–Ω–æ —è–∫ –≤–∏–∫–æ–Ω–∞–Ω–µ.');
  });

  it('should notify if task number is invalid', () => {
    handleMarkDone(123, 'done 2');
    sendMessageSpy(123, '‚ùå –ü–æ–º–∏–ª–∫–∞: –∑–∞–≤–¥–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.');
  });
});

describe('handleDeleteTask', () => {
  it('should delete a task by its number', () => {
    userTasks[123] = [{ task: 'Test Task', done: false }];
    handleDeleteTask(123, 'delete 1');
    expect(userTasks[123]).toHaveLength(0);
    sendMessageSpy(123, 'üóëÔ∏è –ó–∞–≤–¥–∞–Ω–Ω—è "Test Task" –≤–∏–¥–∞–ª–µ–Ω–æ.');
  });

  it('should notify if task number is invalid', () => {
    handleDeleteTask(123, 'delete 3');
    sendMessageSpy(123, '‚ùå –ü–æ–º–∏–ª–∫–∞: –∑–∞–≤–¥–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.');
  });
});
