const { bot } = require('./data');
const { scheduleWeeklyReport } = require('./services/report');
const {
  checkScheduledTasks,
  scheduleTask,
  viewScheduledTasks,
} = require('./services/schedule');
const { autoDeleteOldTasks } = require('./services/autoCleanup');
const { delTask, doneTask } = require('./services/taskManager');
const { handleStart, handleFeedback } = require('./handlers/commandHandlers');
const {
  sendFeedbackMessage,
  sendCommandsList,
  handleAddTask,
  handleViewTasks,
  handleDeleteTask,
  handleMarkDone,
} = require('./handlers/taskHandlers');

setInterval(checkScheduledTasks, 60000);
scheduleWeeklyReport();
setInterval(autoDeleteOldTasks, 1 * 60 * 1000);

bot.on('message', (msg) => {
  const chatId = msg.chat.id;
  const text = msg.text;

  const handleTextCommands = () => {
    if (text === '–ó–∞–ø–ª–∞–Ω—É–≤–∞—Ç–∏ ‚åõ') scheduleTask(chatId);
    if (text === '–í—ñ–¥–≥—É–∫ ‚úèÔ∏è') sendFeedbackMessage(chatId);
    if (text === '–ö–æ–º–∞–Ω–¥–∏ üë®üèª‚Äçüíª') sendCommandsList(chatId);
    if (text === '–î–æ–¥–∞—Ç–∏ üìù') handleAddTask(chatId);
    if (text === '–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ üìã') handleViewTasks(chatId);
    if (text === '–í–∏–π—Ç–∏') bot.sendMessage(chatId, '–í–∏—Ö—ñ–¥ –∑ –º–µ–Ω—é.');
  };

  handleTextCommands();

  const handleRegexActions = () => {
    const deleteMatch = text.match(/delTask (\d+)/);
    if (deleteMatch) {
      const index = parseInt(deleteMatch[1], 10) - 1;
      delTask(chatId, index);
    }

    const markDoneMatch = text.match(/doneTask (\d+)/);
    if (markDoneMatch) {
      const index = parseInt(markDoneMatch[1], 10) - 1;
      doneTask(chatId, index);
    }
  };

  handleRegexActions();

  if (text.startsWith('/feedback')) {
    bot.emit('text', msg);
  }

  if (text.startsWith('delete ')) {
    handleDeleteTask(chatId, text);
  }

  if (text.startsWith('done ')) {
    handleMarkDone(chatId, text);
  }

  if (msg.text === '–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ üìã') {
    viewScheduledTasks(chatId);
  }
});

bot.onText(/\/start/, handleStart);
bot.onText(/\/feedback/, handleFeedback);
