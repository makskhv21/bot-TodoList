require('dotenv').config();
const TelegramBot = require('node-telegram-bot-api');

const { token, developerChatId } = require('./config');

const bot = new TelegramBot(token, { polling: true });

const userTasks = {};
const scheduledTasks = [];

const mainMenuKeyboard = {
  reply_markup: {
    keyboard: [
      ['–î–æ–¥–∞—Ç–∏ üìù', '–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ üìã'], 
      ['–ó–∞–ø–ª–∞–Ω—É–≤–∞—Ç–∏ ‚åõ', '–ö–æ–º–∞–Ω–¥–∏ üë®üèª‚Äçüíª'], 
      ['–í–∏–π—Ç–∏'] 
    ],
    resize_keyboard: true,
    one_time_keyboard: true,
  },
};

const addTaskKeyboard = {
  reply_markup: {
    keyboard: [
      ['–ó–∞–≤–µ—Ä—à–∏—Ç–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω—å'],
    ],
    resize_keyboard: true,
  },
};

const scheduleTaskKeyboard = {
  reply_markup: {
    keyboard: [
      ['–ü–ª–∞–Ω—É–≤–∞—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è –∑ –¥–∞—Ç–æ—é', '–í–∏–π—Ç–∏'],
    ],
    resize_keyboard: true,
  },
};

function checkScheduledTasks() {
  const now = new Date();

  scheduledTasks.forEach((task, index) => {
    const taskTime = new Date(task.date);

    if (
      taskTime.getHours() === 9 &&
      taskTime.getMinutes() === 0 &&
      taskTime.getDate() === now.getDate() &&
      taskTime.getMonth() === now.getMonth() &&
      taskTime.getFullYear() === now.getFullYear()
    ) {
      bot.sendMessage(task.chatId, `‚è∞ –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è: ${task.task}`);
      scheduledTasks.splice(index, 1); 
    }
  });
}

setInterval(checkScheduledTasks, 60000);


function weeklyReport() {
  let totalTasks = 0;
  let completedTasks = 0;
  let scheduledCount = scheduledTasks.length;

  for (const userId in userTasks) {
    if (userTasks[userId]) {
      totalTasks += userTasks[userId].length;
      completedTasks += userTasks[userId].filter(task => task.done).length;
    }
  }

  const reportMessage = `üìä –ó–≤—ñ—Ç –∑–∞ –ø–æ—Ç–æ—á–Ω–∏–π —Ç–∏–∂–¥–µ–Ω—å:
  - –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–≤–¥–∞–Ω—å: ${totalTasks}
  - –ö—ñ–ª—å–∫—ñ—Å—Ç—å –≤–∏–∫–æ–Ω–∞–Ω–∏—Ö –∑–∞–≤–¥–∞–Ω—å: ${completedTasks}
  - –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–∏—Ö –∑–∞–≤–¥–∞–Ω—å: ${scheduledCount}`;

  for (const userId in userTasks) {
    bot.sendMessage(userId, reportMessage);
  }
}

function scheduleWeeklyReport() {
  const now = new Date();
  const nextMonday = new Date();
  
  nextMonday.setDate(now.getDate() + ((8 - now.getDay()) % 7));
  nextMonday.setHours(12, 0, 0);

  const timeUntilNextReport = nextMonday - now;

  setTimeout(() => {
    weeklyReport();
    scheduleWeeklyReport(); 
  }, timeUntilNextReport);
}

scheduleWeeklyReport();

function autoDeleteYesterdayTasks() {
  const now = new Date();
  const yesterday = new Date();
  yesterday.setDate(now.getDate() - 1); 

  for (const userId in userTasks) {
    if (userTasks[userId]) {
      userTasks[userId] = userTasks[userId].filter(task => {
        const taskDate = new Date(task.date);
        if (
          task.done && 
          taskDate.getDate() === yesterday.getDate() &&
          taskDate.getMonth() === yesterday.getMonth() &&
          taskDate.getFullYear() === yesterday.getFullYear()
        ) {
          bot.sendMessage(userId, `üóëÔ∏è –ó–∞–≤–¥–∞–Ω–Ω—è "${task.task}" –±—É–ª–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ.`);
          return false; 
        }
        return true;
      });
    }
  }

  for (let i = scheduledTasks.length - 1; i >= 0; i--) {
    const task = scheduledTasks[i];
    const taskDate = new Date(task.date);

    if (
      task.done &&
      taskDate.getDate() === yesterday.getDate() &&
      taskDate.getMonth() === yesterday.getMonth() &&
      taskDate.getFullYear() === yesterday.getFullYear()
    ) {
      bot.sendMessage(task.chatId, `üóëÔ∏è –ó–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–µ –∑–∞–≤–¥–∞–Ω–Ω—è "${task.task}" –±—É–ª–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ.`);
      scheduledTasks.splice(i, 1);
    }
  }
}

setInterval(autoDeleteYesterdayTasks, 1 * 60 * 1000);

function showMainMenu(chatId) {
  bot.sendMessage(chatId, "–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:", {
    reply_markup: mainMenuKeyboard.reply_markup,
  });
}

function getTodayFormatted() {
  const now = new Date();
  const days = [
    '–Ω–µ–¥—ñ–ª—è',
    '–ø–æ–Ω–µ–¥—ñ–ª–æ–∫',
    '–≤—ñ–≤—Ç–æ—Ä–æ–∫',
    '—Å–µ—Ä–µ–¥–∞',
    '—á–µ—Ç–≤–µ—Ä',
    '–ø‚Äô—è—Ç–Ω–∏—Ü—è',
    '—Å—É–±–æ—Ç–∞',
  ];
  const day = days[now.getDay()];
  const date = now.getDate();
  const month = now.getMonth() + 1;
  const year = now.getFullYear();
  return `${day} - ${date}.${month}.${year} —Ä.;`;
}

function scheduleTask(chatId) {
  bot.sendMessage(
    chatId,
    "–í–≤–µ–¥–∏ –∑–∞–≤–¥–∞–Ω–Ω—è —É —Ñ–æ—Ä–º–∞—Ç—ñ: –¢–µ–∫—Å—Ç –∑–∞–≤–¥–∞–Ω–Ω—è - –î–∞—Ç–∞ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: –ó–∞–≤–¥–∞–Ω–Ω—è –Ω–∞ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è - 2024.12.08):"
  );

  bot.once('message', function handleTask(response) {
    if (response.text === '–í–∏–π—Ç–∏') {
      bot.sendMessage(chatId, "–í—ñ–¥–º—ñ–Ω–µ–Ω–æ –ø–ª–∞–Ω—É–≤–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è.");
      return;
    }

    const regex = /(.+)\s*-\s*(\d{4}\.\d{2}\.\d{2})/;
    const match = response.text.match(regex);

    if (!match) {
      bot.sendMessage(chatId, "‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑.");
      return;
    }

    const taskText = match[1].trim();
    const dateString = match[2];
    const scheduledDate = new Date(dateString);

    if (isNaN(scheduledDate.getTime())) {
      bot.sendMessage(chatId, "‚ùå –ù–µ–≤—ñ—Ä–Ω–∞ –¥–∞—Ç–∞. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑.");
      return;
    }

    scheduledTasks.push({
      chatId,
      task: taskText,
      date: scheduledDate,
    });

    bot.sendMessage(
      chatId,
      `‚úÖ –ó–∞–≤–¥–∞–Ω–Ω—è "${taskText}" –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–æ –Ω–∞ ${scheduledDate.toDateString()}.`
    );
  });
}

function viewScheduledTasks(chatId) {
  if (scheduledTasks.length === 0) {
    bot.sendMessage(chatId, "‚ùó –£ —Ç–µ–±–µ –Ω–µ–º–∞—î –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–∏—Ö –∑–∞–≤–¥–∞–Ω—å.");
  } else {
    const taskListMessage = scheduledTasks
      .map(
        (task, index) => `${index + 1}. ${task.task} - ${task.date.toDateString()}`
      )
      .join('\n');

    bot.sendMessage(
      chatId,
      `–û—Å—å —Ç–≤—ñ–π —Å–ø–∏—Å–æ–∫ –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–∏—Ö –∑–∞–≤–¥–∞–Ω—å:\n${taskListMessage}\n\n–í–≤–µ–¥–∏:\n- 'delTask <–Ω–æ–º–µ—Ä>' - –≤–∏–¥–∞–ª–µ–Ω–Ω—è .\n- 'doneTask <–Ω–æ–º–µ—Ä>' - –≤–∏–∫–æ–Ω–∞–Ω–µ.`,
    );
  }
}

function delTask(chatId, index) {
  if (index >= 0 && index < scheduledTasks.length) {
    const removedTask = scheduledTasks.splice(index, 1);
    bot.sendMessage(chatId, `üóëÔ∏è –ó–∞–≤–¥–∞–Ω–Ω—è "${removedTask[0].task}" –±—É–ª–æ –≤–∏–¥–∞–ª–µ–Ω–æ.`);
  } else {
    bot.sendMessage(chatId, "‚ùå –ü–æ–º–∏–ª–∫–∞: –∑–∞–≤–¥–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.");
  }
}

function doneTask(chatId, index) {
  if (index >= 0 && index < scheduledTasks.length) {
    const task = scheduledTasks[index];
    task.done = true;
    bot.sendMessage(chatId, `‚úÖ –ó–∞–≤–¥–∞–Ω–Ω—è "${task.task}" –ø–æ–∑–Ω–∞—á–µ–Ω–æ —è–∫ –≤–∏–∫–æ–Ω–∞–Ω–µ.`);
  } else {
    bot.sendMessage(chatId, "‚ùå –ü–æ–º–∏–ª–∫–∞: –∑–∞–≤–¥–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.");
  }
}

bot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id;
  bot.sendMessage(
    chatId,
    `üåü *–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ TaskBot!* ü§ñ\n\n
    –Ø —Ç–≤—ñ–π –ø–æ–º—ñ—á–Ω–∏–∫ —É –ø–ª–∞–Ω—É–≤–∞–Ω–Ω—ñ –∑–∞–≤–¥–∞–Ω—å. –û—Å—å —â–æ —è –º–æ–∂—É –∑—Ä–æ–±–∏—Ç–∏ –¥–ª—è —Ç–µ–±–µ:\n\n
    ‚úÖ –î–æ–¥–∞—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è –¥–æ —Å–ø–∏—Å–∫—É.\n
    üìã –ü–µ—Ä–µ–≥–ª—è–¥–∞—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è.\n
    ‚è≥ –ó–∞–ø–ª–∞–Ω–æ–≤—É–≤–∞—Ç–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è.\n
    üìä –°—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ –∑–≤—ñ—Ç–∏ –ø—Ä–æ –≤–∏–∫–æ–Ω–∞–Ω—ñ –∑–∞–≤–¥–∞–Ω–Ω—è —â–æ—Ç–∏–∂–Ω—è.\n\n
    –ì–æ—Ç–æ–≤–∏–π –ø–æ—á–∞—Ç–∏? –ù–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ —Ç–∞ –æ–±–µ—Ä–∏ –ø–æ—Ç—Ä—ñ–±–Ω—É –æ–ø—Ü—ñ—é! üëá`,
    { parse_mode: 'Markdown', reply_markup: mainMenuKeyboard.reply_markup }
  );
});



bot.on('message', (msg) => {
  const chatId = msg.chat.id;

  if (msg.text === '–ó–∞–ø–ª–∞–Ω—É–≤–∞—Ç–∏ ‚åõ') {
    scheduleTask(chatId);
  }

  if (msg.text === '–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ üìã') {
    viewScheduledTasks(chatId);
  }

  const deleteMatch = msg.text.match(/delTask (\d+)/);
  if (deleteMatch) {
    const index = parseInt(deleteMatch[1], 10) - 1;
    delTask(chatId, index);
    return;
  }

  const markDoneMatch = msg.text.match(/doneTask (\d+)/);
  if (markDoneMatch) {
    const index = parseInt(markDoneMatch[1], 10) - 1;
    doneTask(chatId, index);
    return;
  }

  if (msg.text === '–ö–æ–º–∞–Ω–¥–∏ üë®üèª‚Äçüíª') {
    const responseMessage = `*–û—Å—å –¥–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:* ‚úîÔ∏è 
    - '–î–æ–¥–∞—Ç–∏ üìù' - –î–æ–¥–∞—Ç–∏ –Ω–æ–≤–µ –∑–∞–≤–¥–∞–Ω–Ω—è.
    - '–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ üìã' - –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Å–ø–∏—Å–æ–∫ –∑–∞–≤–¥–∞–Ω—å.
    - '–ó–∞–ø–ª–∞–Ω—É–≤–∞—Ç–∏ ‚åõ' - –ó–∞–ø–ª–∞–Ω—É–≤–∞—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è.
    - '–í–∏–π—Ç–∏' - –í–∏—Ö—ñ–¥ –∑ –±–æ—Ç–∞.

    üí° –Ø–∫—â–æ —É –≤–∞—Å —î —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –∞–±–æ –≤—ñ–¥–≥—É–∫–∏, –Ω–∞–ø–∏—à—ñ—Ç—å —ó—Ö —É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.`;
    
    bot.sendMessage(chatId, responseMessage);
    
    // –û—á—ñ–∫—É—î–º–æ –≤—ñ–¥–≥—É–∫
    bot.once('message', (response) => {
      if (response.text) {
        bot.sendMessage(
          chatId,
          '–î—è–∫—É—î–º–æ –∑–∞ –≤–∞—à –≤—ñ–¥–≥—É–∫! –ú–∏ –ø–µ—Ä–µ–¥–∞–º–æ –π–æ–≥–æ —Ä–æ–∑—Ä–æ–±–Ω–∏–∫—É. üòä'
        );

        // –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –≤—ñ–¥–≥—É–∫—É —Ä–æ–∑—Ä–æ–±–Ω–∏–∫—É
        bot.sendMessage(
          developerChatId,
          `üì© –ù–æ–≤–∏–π –≤—ñ–¥–≥—É–∫ –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ${response.from.username || response.from.id}:\n"${response.text}"`
        );
      }
    });
  }

  if (msg.text === '–î–æ–¥–∞—Ç–∏ üìù') {
    bot.sendMessage(
      chatId,
      "–í–≤–µ–¥–∏ –∑–∞–≤–¥–∞–Ω–Ω—è, —è–∫–µ —Ö–æ—á–µ—à –¥–æ–¥–∞—Ç–∏. –ù–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É '–ó–∞–≤–µ—Ä—à–∏—Ç–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω—å', —â–æ–± –∑—É–ø–∏–Ω–∏—Ç–∏."
    );

    bot.sendMessage(chatId, "–¢–µ–ø–µ—Ä –≤–≤–æ–¥—å –∑–∞–≤–¥–∞–Ω–Ω—è:", {
      reply_markup: addTaskKeyboard.reply_markup,
    });

    bot.once('message', function handleTask(response) {
      if (response.text === '–ó–∞–≤–µ—Ä—à–∏—Ç–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω—å') {
        bot.sendMessage(chatId, "‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ –ø—Ä–æ—Ü–µ—Å –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω—å.");
        showMainMenu(chatId);
        return;
      }

      if (response.text) {
        userTasks[chatId] = userTasks[chatId] || [];
        userTasks[chatId].push({ task: response.text, done: false });
        bot.sendMessage(chatId, `‚úÖ –ó–∞–≤–¥–∞–Ω–Ω—è "${response.text}" –¥–æ–¥–∞–Ω–æ –¥–æ —Å–ø–∏—Å–∫—É.`);
        bot.once('message', handleTask);
      } else {
        bot.sendMessage(chatId, "‚ùå –ó–∞–≤–¥–∞–Ω–Ω—è –Ω–µ –±—É–ª–æ –≤–≤–µ–¥–µ–Ω–æ.");
      }
    });
  }


  if (msg.text === '–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ üìã') {
    if (!userTasks[chatId] || userTasks[chatId].length === 0) {
      bot.sendMessage(chatId, "‚ùó –£ —Ç–µ–±–µ –Ω–µ–º–∞—î –∑–∞–≤–¥–∞–Ω—å.");
      return;
    }

    const today = getTodayFormatted();
    const taskListMessage = userTasks[chatId]
      .map(
        (task, index) => `${index + 1}. ${task.done ? '‚úÖ' : '‚ùå'} ${task.task}`
      )
      .join('\n');

    bot.sendMessage(
      chatId,
      `${today}\n*–û—Å—å —Ç–≤—ñ–π —Å–ø–∏—Å–æ–∫ –∑–∞–≤–¥–∞–Ω—å:*\n${taskListMessage}\n\n–í–≤–µ–¥–∏:\n- 'done <–Ω–æ–º–µ—Ä>', —â–æ–± –ø–æ–∑–Ω–∞—á–∏—Ç–∏ –≤–∏–∫–æ–Ω–∞–Ω–µ.\n- 'delete <–Ω–æ–º–µ—Ä>', —â–æ–± –≤–∏–¥–∞–ª–∏—Ç–∏.`,
      { parse_mode: 'Markdown' }
    );
  }


  if (msg.text.startsWith('delete ')) {
    const taskNumber = parseInt(msg.text.split(' ')[1]) - 1;
    if (userTasks[chatId] && userTasks[chatId][taskNumber]) {
      const removedTask = userTasks[chatId].splice(taskNumber, 1);
      bot.sendMessage(chatId, `üóëÔ∏è –ó–∞–≤–¥–∞–Ω–Ω—è "${removedTask[0].task}" –≤–∏–¥–∞–ª–µ–Ω–æ.`);
    } else {
      bot.sendMessage(chatId, "‚ùå –ü–æ–º–∏–ª–∫–∞: –∑–∞–≤–¥–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.");
    }
  }


  if (msg.text.startsWith('done ')) {
    const taskNumber = parseInt(msg.text.split(' ')[1]) - 1;
    if (userTasks[chatId] && userTasks[chatId][taskNumber]) {
      userTasks[chatId][taskNumber].done = true;
      bot.sendMessage(chatId, `‚úÖ –ó–∞–≤–¥–∞–Ω–Ω—è "${userTasks[chatId][taskNumber].task}" –ø–æ–∑–Ω–∞—á–µ–Ω–æ —è–∫ –≤–∏–∫–æ–Ω–∞–Ω–µ.`);
    } else {
      bot.sendMessage(chatId, "‚ùå –ü–æ–º–∏–ª–∫–∞: –∑–∞–≤–¥–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.");
    }
  }

  if (msg.text === '–í–∏–π—Ç–∏') {
    bot.sendMessage(chatId, "–í–∏—Ö—ñ–¥ –∑ –º–µ–Ω—é.");
  }
});